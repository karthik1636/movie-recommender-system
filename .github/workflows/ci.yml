name: "CI/CD Pipeline"

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3
      
      - name: "Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python-version }}"
      
      - name: "Cache pip dependencies"
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: "${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}"
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black flake8 mypy
      
      - name: "Run linting"
        run: |
          black --check --diff .
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: "Run type checking"
        run: |
          mypy api/ database.py streamlit_app*.py --ignore-missing-imports
      
      - name: "Run tests"
        run: |
          pytest tests/ --cov=api --cov=database --cov-report=xml --cov-report=term-missing
      
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v2
      
      - name: "Build Docker image"
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: movie-recommender:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v3
      
      - name: "Run security scan"
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: "Deploy to staging"
        run: |
          echo "Deploying to staging environment..."
          echo "This would deploy to your staging environment"
          echo "Add your staging deployment commands here"
          # Example: kubectl apply -f k8s/staging/
        continue-on-error: true

  notify:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: always()
    
    steps:
      - name: "Notify on failure"
        if: failure()
        run: |
          echo "One or more jobs failed!"
          echo "Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      
      - name: "Notify on success"
        if: success()
        run: |
          echo "All jobs completed successfully! ðŸŽ‰"
          echo "Build artifacts are ready for deployment." 